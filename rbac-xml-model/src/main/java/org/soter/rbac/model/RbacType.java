//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.0.3-b01-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2008.03.26 at 04:26:50 PM PDT 
//


package org.soter.rbac.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Collections;
import java.util.Collection;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlTransient;


/**
 * <p>Java class for rbacType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="rbacType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="user" type="{http://geronimo.apache.org/xml/ns/rbac-xml}userType" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="scope" type="{http://geronimo.apache.org/xml/ns/rbac-xml}scopeType" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="user-role" type="{http://geronimo.apache.org/xml/ns/rbac-xml}user-roleType" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "rbacType", propOrder = {
    "user",
    "scope",
    "userRole"
})
public class RbacType implements Serializable
{

    private final static long serialVersionUID = 12343L;
    private final KeyedCollection<String, UserType> user = new KeyedCollection<String, UserType>();
    private final KeyedCollection<String, ScopeType> scope = new KeyedCollection<String, ScopeType>();
    @XmlElement(name = "user-role")
    private final KeyedCollection<String, UserRoleType> userRole = new KeyedCollection<String, UserRoleType>();

    @XmlTransient
    private final Map<String, ScopeType> scopes = new HashMap<String, ScopeType>();
    @XmlTransient
    private final Map<String, String> userPassword = new HashMap<String, String>();
    @XmlTransient
    private final Map<String, List<RoleType>> userRoles = new HashMap<String, List<RoleType>>();

    public RbacType() {
    }

    public RbacType(RbacType original) {
        user.addAll(original.user);
        userRole.addAll(original.userRole);
        scope.addAll(original.scope);
        userPassword.putAll(original.userPassword);
        for (Map.Entry<String, ScopeType> scopeEntry: original.scopes.entrySet()) {
            scopes.put(scopeEntry.getKey(), new ScopeType(scopeEntry.getValue(), null));
        }
        for (Map.Entry<String, List<RoleType>> roleEntry: original.userRoles.entrySet()) {
            List<RoleType> roles = new ArrayList<RoleType>();
            for (RoleType role: roleEntry.getValue()) {
                ScopeType scope = scopes.get(role.getScope().getScopeName());
                if (scope == null) {
                    throw new NullPointerException("Error: no scope copied with name: " + role.getScope().getScopeName());
                }

                RoleType roleCopy = scope.getRole(role.getRoleName());
                if (roleCopy == null) {
                    throw new NullPointerException("Copy Error: no role found in scope: " + scope + " with name: " + role.getRoleName());
                }
                roles.add(roleCopy);
            }
            userRoles.put(roleEntry.getKey(), roles);
        }
    }

    /**
     * Gets the value of the user property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the user property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUser().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link UserType }
     * 
     * 
     */
    public Collection<UserType> getUser() {
        return this.user;
    }

    /**
     * Gets the value of the scope property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the scope property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getScope().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ScopeType }
     * 
     * 
     */
    public Collection<ScopeType> getScope() {
        return this.scope;
    }

    /**
     * Gets the value of the userRole property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the userRole property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUserRole().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link UserRoleType }
     * 
     * 
     */
    public Collection<UserRoleType> getUserRole() {
        return this.userRole;
    }

    public void start(ClassLoader cl, ClassLoaderLookup clLookup) {
        if (clLookup == null) {
            clLookup = new ClassLoaderLookup() {

                public ClassLoader getClassLoader(String name) {
                    return null;
                }
            };
        }
        for (ScopeType scope: getScope()) {
            scope.start(null, cl, clLookup, scopes);
        }
        for (UserType userType: getUser()) {
            userPassword.put(userType.getUserName(), userType.getPassword());
        }
        for (UserRoleType userRoleType: getUserRole()) {
            List<RoleType> roles = toRoles(userRoleType.getRole());
            userRoles.put(userRoleType.getUser(), roles);
        }
    }

    private List<RoleType> toRoles(List<RoleRefType> roleRefs) {
        List<RoleType> roles = new ArrayList<RoleType>();
        for (RoleRefType ref: roleRefs) {
            RoleType role = getRole(ref);
            roles.add(role);
        }
        return roles;
    }

    public RoleType getRole(RoleRefType roleRef) {
        ScopeType scope = scopes.get(roleRef.getScopeName());
        if (scope == null) {
            throw new NullPointerException("No scope named: " + roleRef.getScopeName());
        }

        RoleType role = scope.getRole(roleRef.getRoleName());
        if (role == null) {
            throw new NullPointerException("No role named: " + roleRef.getRoleName());
        }
        return role;
    }

    public List<RoleType> getUserRoles(String userName, String password) {
        if (password.equals(userPassword.get(userName))) {
            return getUserRoles(userName);
        }
        return Collections.emptyList();
    }

    public List<RoleType> getUserRoles(String userName) {
        List<RoleType> roles = userRoles.get(userName);
        if (roles != null) {
            return roles;
        }
        return Collections.emptyList();
    }

    public ScopeType getScope(String scopeName) {
        return scopes.get(scopeName);
    }

    public void mergeModel(RbacType bits) {
        for (UserType user: bits.getUser()) {
            if (getUser().contains(user)) {
                throw new IllegalArgumentException("User " + user.getUserName() + " is already known");
            }
            getUser().add(user);
        }
        for (UserRoleType userRole: bits.getUserRole()) {
            if (getUserRole().contains(userRole)) {
                throw new IllegalStateException("UserRole already registered: " + userRole);
            }
            getUserRole().add(userRole);
        }
        for (ScopeType bit: bits.getScope()) {
            String scopeName = bit.getScopeName();
            ScopeType existingScope = getScope(scopeName);
            if (existingScope == null) {
                getScope().add(bit);
            } else {
                existingScope.mergeModel(bit);
            }
        }
    }
    public void merge(RbacType bits) {
        for (UserType user: bits.getUser()) {
            if (userPassword.containsKey(user.getUserName())) {
                throw new IllegalArgumentException("User " + user.getUserName() + " is already known");
            }
            userPassword.put(user.getUserName(), user.getPassword());
        }
        for (ScopeType bit: bits.getScope()) {
            String scopeName = bit.getScopeName();
            ScopeType existingScope = getScope(scopeName);
            if (existingScope == null) {
                scopes.put(scopeName, bit);
            } else {
                existingScope.merge(bit);
            }
        }
        for (UserRoleType userRole: bits.getUserRole()) {
            if (userRoles.containsKey(userRole.getUser())) {
                throw new IllegalStateException("UserRole already registered: " + userRole);
            }
            userRoles.put(userRole.getUser(), toRoles(userRole.getRole()));
        }
    }

    public void mergeData(RbacType bits) {
        for (UserType user : bits.user) {
            if (this.user.toMap().containsKey(user.getUserName())) {
                throw new IllegalArgumentException("User " + user.getUserName() + " is already defined");
            }
            this.user.add(user);
        }

        for (ScopeType scope : bits.scope) {
            ScopeType existingScope = this.scope.toMap().get(scope.getScopeName());
            if (existingScope != null) {
                // todo verify
                existingScope.mergeData(scope);
            } else {
                this.scope.add(scope);
            }
        }

        for (UserRoleType userRole: bits.userRole) {
            if (this.userRole.toMap().containsKey(userRole.getUser())) {
                throw new IllegalStateException("UserRole already registered: " + userRole);
            }
            this.userRole.add(userRole);
        }
    }

    public void unmerge(RbacType bits, String removeScope) {

    }

    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        RbacType rbacType = (RbacType) o;

        if (scope != null ? !scope.equals(rbacType.scope) : rbacType.scope != null) return false;
        if (user != null ? !user.equals(rbacType.user) : rbacType.user != null) return false;
        if (userRole != null ? !userRole.equals(rbacType.userRole) : rbacType.userRole != null) return false;

        return true;
    }

    public int hashCode() {
        int result;
        result = (user != null ? user.hashCode() : 0);
        result = 31 * result + (scope != null ? scope.hashCode() : 0);
        result = 31 * result + (userRole != null ? userRole.hashCode() : 0);
        result = 31 * result + (scopes != null ? scopes.hashCode() : 0);
        result = 31 * result + (userPassword != null ? userPassword.hashCode() : 0);
        result = 31 * result + (userRoles != null ? userRoles.hashCode() : 0);
        return result;
    }

}
